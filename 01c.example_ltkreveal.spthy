theory advanced_threat

begin

builtins: asymmetric-encryption

/* 
We formalize the following protocol:

1. A -> B: {A,na}pk(B), {A,na}sk(A)  (payload+signature)
*/

// Public key infrastructure
rule Register_pk:
  [ Fr(~ltkX) ]
-->
  [ !Ltk($X, ~ltkX), !Pk($X, pk(~ltkX)), Out(pk(~ltkX))]

// Compromising an agent's long-term key
rule Reveal_ltk:
  [ !Ltk($X, ltkX) ] 
--[ Reveal($X) ]->
  [ Out(ltkX) ]

// Role A sends first message
rule A_1_send:
  let m = aenc(<$A, ~na>, pkB)
  in
  [ Fr(~na), !Pk($B, pkB)]
--[ Send($A, $B, m), Secret(~na), Honest($A), Honest($B), Role('A')]->
  [ St_A_1($A, pkB, $B, ~na), Out( m )]

// Role B receives first message
rule B_1_receive:
  let m = aenc(<$A, na>, pk(skB))
  in
  [ !Ltk($B, skB),  In(m)]
--[ Recv($B, $A, m), Secret(na), Honest($B), Honest($A), Role('B')]->
  [ St_B_1($B, skB, $A, na)]

lemma executable:
exists-trace
  "Ex A B m #i #j. Send(A,B,m)@i & Recv(B,A,m) @j"

lemma secret_A:
all-traces
  "All n #i. 
    Secret(n) @i & Role('A') @i ==>
      (not (Ex #j. K(n)@j)) 
 //   | (Ex B #j. Reveal(B)@j & Honest(B)@i)
  "

lemma secret_B:
all-traces
  "All n #i. 
    Secret(n) @i & Role('B') @i ==> 
      (not (Ex #j. K(n)@j)) 
    | (Ex B #j. Reveal(B)@j & Honest(B)@i)
  "

end
