/*
Initial Example for the Tamarin Manual
======================================

Authors: 	Simon Meier, Benedikt Schmidt
Updated by: 	Jannik Dreier, Ralf Sasse
Date: 	        June 2016

This file is documented in the Tamarin user manual.

*/

theory FirstExample
begin

builtins: hashing, asymmetric-encryption


/* 
We formalize the following protocol:

1. Client -> Server: {Client,Key}pk(Server)
2. Server -> Client: hash(Key)

*/


// Registering a public key
rule Register_pk:
    [ Fr(~ltk) ]
  -->
    [ !Ltk($A, ~ltk), !Pk($A, pk(~ltk)), Out(pk(~ltk))  ]

/* Un-comment this for the advanced threat model
rule Reveal_ltk:
    [ !Ltk(A, ltk) ]
  --[ LtkReveal(A) ]->
    [ Out(ltk) ]
*/


/*
Client Rules
*/

// Start a new thread executing the client role, choosing the server non-deterministically.
rule Client_1:
    [  ]
  --[  ]->
    [  ]

// Receive the reply from the server
rule Client_2:
    [  ]
  --[  ]->
    [  ]


/*
Server Rule
*/

// A server thread answering in one-step to a session-key setup request from some client.
rule Serv_1:
    [  ]
  --[  ]->
    [  ]


/*
Sanity check: the protocol is executable and yield the expected result
*/

lemma Client_session_key_honest_setup:
  exists-trace
  "
    ...
  "



/*
Security properties
*/

// Secrecy: Proove that the session key is indeed secret from the point of view of the Client
lemma Client_session_key_secrecy:
  "
    ...
  "

// Write a similar lemma from the server point of view
// Try to prove it
// What happens and why?
lemma WRONG_Server_key_secrecy:
  "
    ...
  "

// Authenticity: Proove that if a Client thread completes the protocol, the Server actually answered
lemma Client_auth:
  " 
    ...
  "

// Authenticity: stronger property -> prove that each session key is associated with a unique request/reply
lemma Client_auth_injective:
  "
    ...
  "


end
